from __future__ import print_function
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
from googleapiclient.discovery import build
from httplib2 import Http
from oauth2client import file, client, tools
from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import  warnings
from    selenium import webdriver
from    selenium.webdriver.support.ui import WebDriverWait
from    selenium.webdriver.support import expected_conditions as EC
from    selenium.webdriver.common.by import By
from    selenium.webdriver.common.keys import Keys 
from    selenium.webdriver.common.action_chains import ActionChains
from    selenium.common.exceptions import NoSuchElementException,StaleElementReferenceException
from    bs4      import BeautifulSoup
import  time
import  pyperclip
import  requests
import  datetime
import  pymssql
import  pandas as pd
from  pandas.core.frame import DataFrame
import  matplotlib.pyplot as plt
import  chromedriver_autoinstaller
import  subprocess

from    selenium import webdriver
from    selenium.webdriver.chrome.options import Options
from    selenium.webdriver.common.alert import Alert
from    selenium.webdriver.chrome.service import Service

import  chromedriver_autoinstaller
import  subprocess
import  shutil 
import  xlrd
import  openpyxl 
import  pygsheets
import  csv
import  re
import  webbrowser
import  os
import  sys
import  urllib.request
import  json
from    pandas.io.json import json_normalize
import  hashlib
import  hmac
import  base64
import  numpy as np
import  autoit #autoit는 반드시 autoit 프로그램이 깔려있어야됨
import  pyautogui
from PIL import ImageGrab
try:
    from PIL import Image
except ImportError:
    import Image
import pytesseract
import cv2
import numpy as np
import glob
from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import io

from time import gmtime, strftime

import youtube_dl
from youtube_transcript_api import YouTubeTranscriptApi

import pdfkit
from PyPDF2 import PdfFileReader, PdfFileWriter
from tika import parser
import pdfkit

import pytumblr #텀블러
from requests_oauthlib import OAuth1Session

import tweepy #트위터용 
import pytumblr #텀블러
from requests_oauthlib import OAuth1Session
import config

from instagrapi import Client
from instagrapi.types import StoryMention, StoryMedia, StoryLink, StoryHashtag
import urllib.request

#네이버 메일 포워딩 import 리스트  
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from email.mime.application import MIMEApplication

warnings.filterwarnings('ignore')


##############################크롬 구동


try:
    shutil.rmtree(r"c:\chrometemp")  #쿠키 / 캐쉬파일 삭제
except FileNotFoundError:
    pass
subprocess.Popen(r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9222 --user-data-dir="C:\chrometemp"') # 디버거 크롬 구동
option = Options()
option.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
chrome_ver = chromedriver_autoinstaller.get_chrome_version().split('.')[0]
try:
    s = Service(f'./{chrome_ver}/chromedriver.exe')
    driver = webdriver.Chrome(service=s, options=option)
    #driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=option)
except:
    chromedriver_autoinstaller.install(True)
    s = Service(f'./{chrome_ver}/chromedriver.exe')
    driver = webdriver.Chrome(service=s, options=option)
    #driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=option)
    #driver = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe', options=option)
driver.maximize_window() #최대창
time.sleep(3)    
driver.implicitly_wait(10)
action = ActionChains(driver) #액션지정


################################ 엑셀파일 지정

f = open("C:/Users/user/Desktop/에이블스튜디오/학원개원_강사_크롤링/crawling_18_result.csv", 'w', encoding='utf-8-sig')
f.write('articleid,article_url,article_subject,td_date,td_view' + '\n')



################################ 티스토리 로그인 ######################################

#url = 'https://gamecoinkorea.tistory.com/manage'  #url 수정

url = 'https://logins.daum.net/accounts/loginform.do?status=-401&url=https%3A%2F%2Ftop.cafe.daum.net%2F'  #url 수정
driver.get(url)
time.sleep(3)
driver.implicitly_wait(10)
action = ActionChains(driver) #액션지정
driver.find_element_by_xpath('//*[@id="mArticle"]/div/div/div/div[2]/a').click()   #카카오 로그인 클릭
time.sleep(2)
driver.implicitly_wait(10)

#id, pw 입력

#username=driver.find_element_by_xpath('//*[@id="id_email_2"]')  #(구)

try :
    username=driver.find_element_by_xpath('//*[@id="input-loginKey"]')   #(구)
except :
    username=driver.find_element_by_xpath('//*[@id="id_email_2"]')  #id입력
username.send_keys('') 
time.sleep(2)
driver.implicitly_wait(10)


#password=driver.find_element_by_xpath('//*[@id="id_password_3"]') (구)

try :
    password=driver.find_element_by_xpath('//*[@id="input-password"]') #(구)
except :
    password=driver.find_element_by_xpath('//*[@id="id_password_3"]') #pw 입력 
password.send_keys('')
time.sleep(2)
driver.implicitly_wait(10)


#driver.find_element_by_xpath('//*[@id="login-form"]/fieldset/div[8]/button[1]').click() (구)
try :
    driver.find_element_by_xpath('//*[@id="mainContent"]/div/div/form/div[4]/button[1]').click() #(구)
except :
    driver.find_element_by_xpath('//*[@id="login-form"]/fieldset/div[8]/button[1]').click() #로그인 버튼 클릭
time.sleep(3) 
driver.implicitly_wait(10)

##필수! 반드시 로그인시 2단계 인증은 해제해 놔야함. 
# 2단계 인증 해제 방법 설정 > 카카오계정 > 2단계 인증 > 비번 열어서 해제 하면 됨.


################################ 다음 카페 이동


daum_cafe_url = 'https://cafe.daum.net/hakwwon/DYJH'  #해당 게시판

driver.get(daum_cafe_url)
time.sleep(3)
driver.implicitly_wait(10)
action = ActionChains(driver) #액션지정

iframes = driver.find_elements_by_tag_name('iframe')
driver.switch_to.frame(iframes[0]) # 0번째 iframe으로 이동
driver.find_element_by_xpath('//*[@id="primaryContent"]/div/div[3]/div[1]/ol/li[2]/a').click() #2 페이지 클릭
time.sleep(3)
driver.implicitly_wait(10)
action = ActionChains(driver) #액션지정


################################ 다음 카페 게시글 URL 가져오기

for page in range(3, 8) : #2페이지부터 시작 (default)
    html = driver.page_source #html 파싱
    soup = BeautifulSoup(html, 'lxml') #html 파싱
    results = soup.find_all('tr', {'class' : ''}) #게시글 카페 컨테이너 긁기  #조회수 #날짜

    print('--------------------------------'+ str(page-1) + '페이지 크롤링을 시작합니다.  --------------------------------')

    for i in range(1, len(results)) :

        ####################### 카페 게시글로 기본정보 크롤링

        articleid = results[i].find('div', {'class' : 'wrap_num'}).text #게시 번호
        article_url = 'https://cafe.daum.net'+results[i].find('a')['href'] #게시 URL
        article_subject = results[i].find('a').text.replace("\r", "").replace("\n", "").replace("\t", "").replace(",", "").replace("  ", "")  #제목
        td_date = results[i].find('td', {'class' : 'td_date'}).text.replace(".", "-") #날짜
        td_date = '20' + str(td_date)        
        
        td_view = results[i].find('td', {'class' : 'td_look'}).text.replace(",", "") #조회수
        
        
        print('--------------------------------'+ str(i) + '번째 게시글 정보 --------------------------------')
        print('게시글 번호 : ' +str(articleid))
        print('게시글 URL : ' + str(article_url))
        print('게시글 제목 : ' + str(article_subject))
        print('게시글 날짜 : ' + str(td_date))
        print('게시글 조회수 : ' + str(td_view))
        
        f.write(str(articleid) + ',' + str(article_url) + ','+ str(article_subject) + ',' + str(td_date) + ',' + str(td_view) + '\n')  #최종입력
    
    
    print('--------------------------------'+ str(page-1) + ' 페이지 크롤링을 완료했습니다.  --------------------------------')

    #page += 1 #페이지 1 추가

    #driver.execute_script("window.scrollTo(0, window.scrollY + 1500);") #스크롤 다운

    driver.find_element_by_xpath('//*[@id="primaryContent"]/div/div[3]/div[1]/ol/li['+str(page)+']/a').click() #다음 페이지 클릭

    time.sleep(2)  #페이지별 크롤링 
    driver.implicitly_wait(10)


f.close()

print("최종완료")


"""

#아이프레임 정보 아는 방법

iframes = driver.find_elements_by_tag_name('iframe')
for i, iframe in enumerate(iframes):
    try:
        print('%d번째 iframe 입니다.' % i)
        # i 번째 iframe으로 변경합니다.
        driver.switch_to.frame(iframes[i])
        # 변경한 iframe 안의 소스를 확인합니다.
        print(driver.page_source)
        # 원래 frame으로 돌아옵니다.
        driver.switch_to.default_content()
    except:
        # exception이 발생했다면 원래 frame으로 돌아옵니다.
        driver.switch_to.default_content()
        # 몇 번째 frame에서 에러가 났었는지 확인합니다.
        print('pass by except : iframes[%d]' % i)
        # 다음 for문으로 넘어갑니다.

"""

driver.close()
driver.quit()
